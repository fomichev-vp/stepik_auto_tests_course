        Пример задачи для execute_script

Теперь рассмотрим реальную ситуацию, когда пользователь должен кликнуть на элемент, который внезапно оказывается перекрыт другим элементом на странице.
Для клика в WebDriver мы используем метод click().
Если элемент оказывается перекрыт другим элементом, то наша программа вызовет следующую ошибку:

selenium.common.exceptions.WebDriverException: Message: unknown error: Element <button type="submit" class="btn btn-default" style="margin-bottom: 1000px;">...</button> is not clickable at point (87, 420). Other element would receive the click: <p>...</p>

Из описания ошибки можно понять, что указанный нами элемент нельзя кликнуть в данной точке, т.к. клик произойдёт на другом элементе с тегом <p>.

Чтобы увидеть пример данной ошибки, запустите следующий скрипт:

from selenium import webdriver
from selenium.webdriver.common.by import By

browser = webdriver.Chrome()
link = "https://SunInJuly.github.io/execute_script.html"
browser.get(link)
button = browser.find_element(By.TAG_NAME, "button")
button.click()

Теперь вы можете сами посмотреть на эту страницу и увидеть, что огромный футер действительно перекрывает нужную нам кнопку.

Чтобы понять, как решить эту проблему, нужно разобраться, как работает метод click().
1. WebDriver проверит, что ширина и высота элемента больше 0, чтобы по нему можно было кликнуть.
2. Если элемент находится за границей окна браузера, WebDriver автоматически проскроллит страницу, чтобы элемент попал в область видимости, то есть не находился за границей экрана.
Но это не гарантирует того, что элемент не перекрыт другим элементом, который тоже находится в области видимости.
3. Selenium рассчитывает координаты центра элемента и производит клик в вычисленную точку.
Это тоже приведёт к ошибке, если часть элемента всё-таки видна, но элемент перекрыт больше чем на половину своей высоты или ширины.

Мы можем заставить браузер дополнительно проскроллить нужный элемент, чтобы он точно стал видимым.
Делается это с помощью следующего скрипта:

"return arguments[0].scrollIntoView(true);"

Мы дополнительно передали в метод scrollIntoView аргумент true, чтобы элемент после скролла оказался в области видимости.
Другие возможные параметры метода можно посмотреть здесь: https://developer.mozilla.org/ru/docs/Web/API/Element/scrollIntoView


В итоге, чтобы кликнуть на перекрытую кнопку, нам нужно выполнить следующие команды в коде:

button = browser.find_element(By.TAG_NAME, "button")
browser.execute_script("return arguments[0].scrollIntoView(true);", button)
button.click()

После выполнения кода элемент button должен оказаться в верхней части страницы. 


Также можно проскроллить всю страницу целиком на строго заданное количество пикселей.
Эта команда проскроллит страницу на 100 пикселей вниз:

browser.execute_script("window.scrollBy(0, 100);")


#  ВНИМАНИЕ
Мы не будем в этом курсе изучать, как работает JavaScript, и обойдемся только приведенным выше примером скрипта с прокруткой страницы.
Для сравнения приведем скрипт на этом языке, который делает то же, что приведенный выше пример для WebDriver:
// javascript
button = document.getElementsByTagName("button")[0];
button.scrollIntoView(true);


#  ВНИМАНИЕ
Обратите внимание, что в коде в WebDriver нужно использовать ключевое слово return.
Также его нужно будет использовать, когда вы захотите получить какие-то данные после выполнения скрипта.
 При этом при тестировании скрипта в консоли браузера слово return использовать не надо.
